{"version":3,"sources":["modules/stations/services/actions.ts","modules/stations/services/reducers.ts","store/root-reducer.ts","store/store.ts","store/hooks.ts","modules/stations/services/selectors.ts","components/toggle-icon-button.tsx","modules/stations/components/play-button/play-button.tsx","modules/stations/components/station-card/station-card-view/station-card-view.tsx","modules/stations/components/station-card/station-card.tsx","modules/stations/components/countries-selector/countries-selector.tsx","modules/stations/components/active-station/active-station-view/active-station-view.tsx","modules/stations/components/active-station/active-station.tsx","modules/stations/all-stations/all-stations.tsx","modules/stations/favourite-stations/favourite-stations.tsx","modules/stations/stations-page/stations-page.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["loadStationsByCountry","createAsyncThunk","country","a","fetch","then","res","json","data","sort","b","votes","stations","loadCountries","loadFavouriteStations","ids","JSON","parse","localStorage","favourites","Promise","all","map","item","setFavouriteStation","createAction","setActiveStation","setSelectedCountry","deleteFavouriteStation","changeIsPlay","createReducer","allStations","favouriteStations","activeStation","isPlay","countries","builder","addCase","fulfilled","state","payload","selectedCountry","push","filter","stationuuid","id","rootReducer","combineReducers","store","configureStore","reducer","devTools","process","useAppSelector","useSelector","getActiveStation","station","getActiveStationId","getActiveStationUrl","url","getActiveStationIsPlay","getCountries","getSelectedCountry","getFavouriteStatus","stationId","includes","getStationsByCountry","getFavouriteStations","ToggleIconButton","active","onClick","Button","variant","PlayButton","toggle","children","className","StationCardView","favouriteStatus","favouriteToggle","playToggle","activeStationId","activeStationIsPlay","Card","Body","Title","name","Row","Col","lg","favicon","alt","src","loading","style","height","size","Text","homepage","Footer","StationCard","dispatch","useDispatch","favStations","stringify","CountriesSelector","onChange","event","target","value","selected","ActiveStationView","activeStationUrl","audio","ref","ActiveStation","useRef","Audio","useEffect","current","play","pause","AllStations","length","xs","md","FavouriteStations","StationsPage","Tabs","defaultActiveKey","Tab","eventKey","title","App","Container","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b2573307.chunk.js","sourcesContent":["import { createAction, createAsyncThunk } from '@reduxjs/toolkit';\nimport { Country, Station } from '../../../typedef';\n\nexport const loadStationsByCountry = createAsyncThunk<\n\t{ stations: Station[]; country: string },\n\tstring\n>('stations/load-stations', async (country) => {\n\tconst stations = await fetch(\n\t\t`http://all.api.radio-browser.info/json/stations/bycountry/${country}`\n\t)\n\t\t.then((res) => res.json())\n\t\t.then((data: Station[]) => data.sort((a, b) => b.votes - a.votes));\n\treturn { stations, country };\n});\n\nexport const loadCountries = createAsyncThunk<Country[]>(\n\t'stations/load-countries',\n\tasync () => {\n\t\treturn await fetch('http://all.api.radio-browser.info/json/countries').then(\n\t\t\t(res) => res.json()\n\t\t);\n\t}\n);\n\nexport const loadFavouriteStations = createAsyncThunk<Station[]>(\n\t'stations/load-favourite-stations',\n\tasync () => {\n\t\tconst ids: string[] = JSON.parse(localStorage.favourites);\n\n\t\tconst data = await Promise.all(\n\t\t\tids.map((item) =>\n\t\t\t\tfetch(`http://all.api.radio-browser.info/json/stations/byuuid/${item}`)\n\t\t\t\t\t.then((res) => res.json())\n\t\t\t\t\t.then((data) => data[0])\n\t\t\t)\n\t\t);\n\n\t\treturn data;\n\t}\n);\n\nexport const setFavouriteStation = createAction<Station>(\n\t'stations/set-favourite'\n);\nexport const setActiveStation = createAction<{\n\tstation: Station;\n\tisPlay: boolean;\n}>('stations/set-active-station');\nexport const setSelectedCountry = createAction<{ selectedCountry: string }>(\n\t'stations/set-country'\n);\nexport const deleteFavouriteStation = createAction<{ id: string }>(\n\t'stations/delete-favourite'\n);\nexport const changeIsPlay = createAction<{ isPlay: boolean }>(\n\t'stations/change-isPause'\n);\n","import { createReducer } from '@reduxjs/toolkit';\nimport {\n\tloadCountries,\n\tloadStationsByCountry,\n\tchangeIsPlay,\n\tdeleteFavouriteStation,\n\tsetFavouriteStation,\n\tsetActiveStation,\n\tsetSelectedCountry,\n\tloadFavouriteStations,\n} from './actions';\nimport { stationsStateType } from './typedef';\n\nconst stationsState: stationsStateType = {\n\tallStations: {},\n\tfavouriteStations: [],\n\tactiveStation: {\n\t\tisPlay: false,\n\t},\n\tcountries: [],\n};\n\nexport const stations = createReducer(stationsState, (builder) =>\n\tbuilder\n\t\t.addCase(loadStationsByCountry.fulfilled, (state, { payload }) => {\n\t\t\tstate.allStations[payload.country] = payload.stations;\n\t\t})\n\n\t\t.addCase(loadCountries.fulfilled, (state, { payload }) => {\n\t\t\tstate.countries = payload;\n\t\t\t// state.selectedCountry = payload[0].name;\n\t\t})\n\n\t\t.addCase(setSelectedCountry, (state, { payload }) => {\n\t\t\tstate.selectedCountry = payload.selectedCountry;\n\t\t})\n\n\t\t.addCase(setActiveStation, (state, { payload }) => {\n\t\t\tstate.activeStation = payload;\n\t\t})\n\n\t\t.addCase(setFavouriteStation, (state, { payload }) => {\n\t\t\tstate.favouriteStations.push(payload);\n\t\t\t// state.favouriteStations[payload.id] = payload.value;\n\t\t})\n\n\t\t.addCase(loadFavouriteStations.fulfilled, (state, { payload }) => {\n\t\t\tstate.favouriteStations = payload;\n\t\t})\n\n\t\t.addCase(deleteFavouriteStation, (state, { payload }) => {\n\t\t\tstate.favouriteStations = state.favouriteStations.filter(\n\t\t\t\t(item) => item.stationuuid !== payload.id\n\t\t\t);\n\t\t})\n\n\t\t.addCase(changeIsPlay, (state, { payload }) => {\n\t\t\tstate.activeStation.isPlay = payload.isPlay;\n\t\t})\n);\n","import {combineReducers} from '@reduxjs/toolkit';\nimport {stations} from '../modules/stations/services/reducers';\n\nexport const rootReducer = combineReducers({\n    stations,\n});","import { configureStore } from '@reduxjs/toolkit';\nimport { rootReducer } from './root-reducer';\n\nexport const store = configureStore({\n\treducer: rootReducer,\n\tdevTools: process.env.NODE_ENV !== 'production',\n});\n","import {store} from './store';\nimport {TypedUseSelectorHook, useSelector} from 'react-redux';\n\nexport type AppState = ReturnType<typeof store.getState>;\nexport const useAppSelector: TypedUseSelectorHook<AppState> = useSelector;\n","import { AppState } from '../../../store/hooks';\n\nexport const getActiveStation = (state: AppState) =>\n\tstate.stations.activeStation.station;\nexport const getActiveStationId = (state: AppState) =>\n\tstate.stations.activeStation.station?.stationuuid;\nexport const getActiveStationUrl = (state: AppState) =>\n\tstate.stations.activeStation.station?.url;\nexport const getActiveStationIsPlay = (state: AppState) =>\n\tstate.stations.activeStation.isPlay;\nexport const getCountries = (state: AppState) => state.stations.countries;\nexport const getSelectedCountry = (state: AppState) =>\n\tstate.stations.selectedCountry;\n\nexport const getFavouriteStatus = (state: AppState, stationId: string) => {\n\tconst stationsIds = state.stations.favouriteStations.map(\n\t\t(item) => item.stationuuid\n\t);\n\treturn stationsIds.includes(stationId);\n};\n\nexport const getStationsByCountry = (state: AppState) => {\n\tconst country = getSelectedCountry(state);\n\treturn state.stations.allStations[country || ''];\n};\n\nexport const getFavouriteStations = (state: AppState) => {\n\treturn state.stations.favouriteStations;\n};\n","import {Button} from 'react-bootstrap';\nimport {FcLike, FcLikePlaceholder} from 'react-icons/all';\nimport React from 'react';\n\ntype Props = {\n    active: boolean,\n    onClick: () => void\n};\n\nexport const ToggleIconButton = ({active, onClick}: Props) => {\n    return (\n        <Button variant='outline-light' onClick={onClick}>{active ? <FcLike/> : <FcLikePlaceholder/>}</Button>\n    )\n};","import React, {ReactElement} from 'react';\nimport './play-button.css';\n\ntype Props = {\n    toggle: () => void,\n    children: ReactElement | ReactElement[]\n};\n\nexport const PlayButton = ({toggle, children}: Props) => {\n    return (\n        <button className='play-button' onClick={toggle}>\n            {children}\n        </button>\n    );\n};\n\n","import React from 'react';\nimport { Station } from '../../../../../typedef';\nimport { Button, Card, Col, Row } from 'react-bootstrap';\nimport { BiRadio } from 'react-icons/all';\nimport { ToggleIconButton } from '../../../../../components/toggle-icon-button';\nimport { PlayButton } from '../../play-button';\nimport { FaPause, FaPlay } from 'react-icons/fa';\n\ntype Props = {\n\tstation: Station;\n\tfavouriteStatus: boolean;\n\tfavouriteToggle: () => void;\n\tplayToggle: () => void;\n\tactiveStationId?: string;\n\tactiveStationIsPlay: boolean;\n};\n\nexport const StationCardView = ({\n\tstation,\n\tfavouriteStatus,\n\tfavouriteToggle,\n\tplayToggle,\n\tactiveStationId,\n\tactiveStationIsPlay,\n}: Props) => {\n\treturn (\n\t\t<Card className='station-card'>\n\t\t\t<Card.Body>\n\t\t\t\t<Card.Title>{station.name}</Card.Title>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col lg={4}>\n\t\t\t\t\t\t{station.favicon ? (\n\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\tclassName='station-card__img'\n\t\t\t\t\t\t\t\talt={station.name}\n\t\t\t\t\t\t\t\tsrc={station.favicon}\n\t\t\t\t\t\t\t\tloading='lazy'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<BiRadio style={{ height: '150px' }} size='100%' />\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Col>\n\t\t\t\t\t<Col lg={8}>\n\t\t\t\t\t\t<Card.Text>{station.homepage}</Card.Text>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t</Card.Body>\n\t\t\t<Card.Footer>\n\t\t\t\t<div className='d-flex'>\n\t\t\t\t\t<Button>Go to page</Button>\n\t\t\t\t\t<ToggleIconButton\n\t\t\t\t\t\tactive={favouriteStatus}\n\t\t\t\t\t\tonClick={favouriteToggle}\n\t\t\t\t\t/>\n\t\t\t\t\t<PlayButton toggle={playToggle}>\n\t\t\t\t\t\t{activeStationId === station.stationuuid && activeStationIsPlay ? (\n\t\t\t\t\t\t\t<FaPause />\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<FaPlay />\n\t\t\t\t\t\t)}\n\t\t\t\t\t</PlayButton>\n\t\t\t\t</div>\n\t\t\t</Card.Footer>\n\t\t</Card>\n\t);\n};\n","import { Station } from '../../../../typedef';\nimport React from 'react';\nimport {\n\tchangeIsPlay,\n\tdeleteFavouriteStation,\n\tsetFavouriteStation,\n\tsetActiveStation,\n} from '../../services/actions';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../../../store/hooks';\nimport {\n\tgetFavouriteStatus,\n\tgetActiveStationId,\n\tgetActiveStationIsPlay,\n} from '../../services/selectors';\nimport { StationCardView } from './station-card-view';\n\ntype Props = {\n\tstation: Station;\n};\n\nexport const StationCard = ({ station }: Props) => {\n\tconst dispatch = useDispatch();\n\n\tconst favStations: string[] = JSON.parse(localStorage.favourites);\n\n\tconst favouriteStatus = useAppSelector((state) =>\n\t\tgetFavouriteStatus(state, station.stationuuid)\n\t);\n\tconst activeStationId = useAppSelector(getActiveStationId);\n\tconst activeStationIsPlay = useAppSelector(getActiveStationIsPlay);\n\n\tconst playToggle = () => {\n\t\tif (activeStationId === station.stationuuid) {\n\t\t\tdispatch(changeIsPlay({ isPlay: !activeStationIsPlay }));\n\t\t} else {\n\t\t\tdispatch(setActiveStation({ station: station, isPlay: true }));\n\t\t}\n\t};\n\n\tconst favouriteToggle = () => {\n\t\tif (favouriteStatus) {\n\t\t\tlocalStorage.favourites = JSON.stringify(\n\t\t\t\tfavStations.filter((item) => item !== station.stationuuid)\n\t\t\t);\n\t\t\tdispatch(\n\t\t\t\tdeleteFavouriteStation({\n\t\t\t\t\tid: station.stationuuid,\n\t\t\t\t})\n\t\t\t);\n\t\t} else {\n\t\t\tlocalStorage.favourites = JSON.stringify([\n\t\t\t\t...favStations,\n\t\t\t\tstation.stationuuid,\n\t\t\t]);\n\n\t\t\tdispatch(setFavouriteStation(station));\n\t\t}\n\t};\n\n\treturn (\n\t\t<StationCardView\n\t\t\tstation={station}\n\t\t\tfavouriteStatus={favouriteStatus}\n\t\t\tfavouriteToggle={favouriteToggle}\n\t\t\tplayToggle={playToggle}\n\t\t\tactiveStationId={activeStationId}\n\t\t\tactiveStationIsPlay={activeStationIsPlay}\n\t\t/>\n\t);\n};\n","import React from 'react';\nimport { Country } from '../../../../typedef';\nimport { useDispatch } from 'react-redux';\nimport { setSelectedCountry } from '../../services/actions';\n\ntype Props = {\n\tcountries: Country[];\n};\n\nexport const CountriesSelector = ({ countries }: Props) => {\n\tconst dispatch = useDispatch();\n\n\tconst onSelectCountry = (event: React.ChangeEvent<HTMLSelectElement>) => {\n\t\tconst country = event.target.value;\n\t\tlocalStorage.country = country;\n\t\tdispatch(setSelectedCountry({ selectedCountry: country }));\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<select onChange={onSelectCountry} className='select'>\n\t\t\t\t{countries.map((country) => (\n\t\t\t\t\t<option\n\t\t\t\t\t\tkey={country.name}\n\t\t\t\t\t\tselected={localStorage.country === country.name}\n\t\t\t\t\t\tvalue={country.name}\n\t\t\t\t\t>\n\t\t\t\t\t\t{country.name}\n\t\t\t\t\t</option>\n\t\t\t\t))}\n\t\t\t</select>\n\t\t</>\n\t);\n};\n","import React, {RefObject} from 'react';\nimport './active-station.css';\nimport {Station} from '../../../../../typedef';\nimport {BiRadio} from 'react-icons/all';\nimport {PlayButton} from '../../play-button';\nimport {FaPause, FaPlay} from 'react-icons/fa';\nimport {ToggleIconButton} from '../../../../../components/toggle-icon-button';\n\ntype Props = {\n    station: Station,\n    favouriteStatus: boolean,\n    favouriteToggle: () => void,\n    playToggle: () => void,\n    activeStationIsPlay: boolean,\n    activeStationUrl?: string,\n    audio: RefObject<HTMLAudioElement>\n};\n\nexport const ActiveStationView = (\n    {station, favouriteStatus, favouriteToggle, playToggle, activeStationIsPlay, activeStationUrl, audio}: Props\n) => {\n    return (\n        <div className='active-stations'>\n            <audio ref={audio} src={activeStationUrl}/>\n            <h1>Current Station</h1>\n\n            <div className='active-stations__info'>\n                {station.favicon\n                    ?\n                    <img alt={station.name}\n                         src={station.favicon}\n                         className='active-stations__img'\n                         loading='lazy'\n                    />\n                    : <BiRadio size='200px'/>\n                }\n\n                <div className='active-stations__describe'>\n                    <h3>Name: {station.name}</h3>\n                    <h4>HomePage: {station.homepage}</h4>\n                </div>\n\n                <div className='active-stations__buttons'>\n                    <PlayButton toggle={playToggle}>\n                        {activeStationIsPlay ? <FaPause/> : <FaPlay/>}\n                    </PlayButton>\n                    <ToggleIconButton active={favouriteStatus} onClick={favouriteToggle}/>\n                </div>\n            </div>\n        </div>\n\n    );\n};\n\n","import React, { useEffect, useRef } from 'react';\nimport {\n\tchangeIsPlay,\n\tdeleteFavouriteStation,\n\tsetFavouriteStation,\n} from '../../services/actions';\nimport { Station } from '../../../../typedef';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../../../store/hooks';\nimport {\n\tgetFavouriteStatus,\n\tgetActiveStationIsPlay,\n\tgetActiveStationUrl,\n} from '../../services/selectors';\nimport { ActiveStationView } from './active-station-view';\n\ntype Props = {\n\tstation: Station;\n};\n\nexport const ActiveStation = ({ station }: Props) => {\n\tconst dispatch = useDispatch();\n\tconst favouriteStatus = useAppSelector((state) =>\n\t\tgetFavouriteStatus(state, station.stationuuid)\n\t);\n\tconst activeStationIsPlay = useAppSelector(getActiveStationIsPlay);\n\tconst activeStationUrl = useAppSelector(getActiveStationUrl);\n\tconst audio = useRef(new Audio(activeStationUrl));\n\n\tuseEffect(() => {\n\t\tactiveStationIsPlay ? audio.current.play() : audio.current.pause();\n\t}, [activeStationUrl, activeStationIsPlay]);\n\n\tconst playToggle = () => {\n\t\tdispatch(changeIsPlay({ isPlay: !activeStationIsPlay }));\n\t};\n\n\tconst favouriteToggle = () => {\n\t\tif (favouriteStatus) {\n\t\t\tdispatch(\n\t\t\t\tdeleteFavouriteStation({\n\t\t\t\t\tid: station.stationuuid,\n\t\t\t\t})\n\t\t\t);\n\t\t} else {\n\t\t\tdispatch(setFavouriteStation(station));\n\t\t}\n\t};\n\n\treturn (\n\t\t<ActiveStationView\n\t\t\tstation={station}\n\t\t\tfavouriteStatus={favouriteStatus}\n\t\t\tfavouriteToggle={favouriteToggle}\n\t\t\tplayToggle={playToggle}\n\t\t\tactiveStationIsPlay={activeStationIsPlay}\n\t\t\tactiveStationUrl={activeStationUrl}\n\t\t\taudio={audio}\n\t\t/>\n\t);\n};\n","import { useEffect } from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport { StationCard } from '../components/station-card';\nimport {\n\tloadCountries,\n\tloadFavouriteStations,\n\tloadStationsByCountry,\n\tsetSelectedCountry,\n} from '../services/actions';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../../store/hooks';\nimport {\n\tgetCountries,\n\tgetActiveStation,\n\tgetSelectedCountry,\n\tgetStationsByCountry,\n} from '../services/selectors';\nimport { CountriesSelector } from '../components/countries-selector';\nimport { ActiveStation } from '../components/active-station';\n\nexport const AllStations = () => {\n\tconst dispatch = useDispatch();\n\tconst countries = useAppSelector(getCountries);\n\tconst selectedCountry = useAppSelector(getSelectedCountry);\n\tconst activeStation = useAppSelector(getActiveStation);\n\tconst stations = useAppSelector(getStationsByCountry);\n\n\tuseEffect(() => {\n\t\tdispatch(loadCountries());\n\t\tdispatch(loadFavouriteStations());\n\t}, [dispatch]);\n\n\tuseEffect(() => {\n\t\tif (selectedCountry) {\n\t\t\tif (!stations) {\n\t\t\t\tdispatch(loadStationsByCountry(localStorage.country));\n\t\t\t}\n\t\t}\n\t}, [dispatch, stations, selectedCountry]);\n\n\tuseEffect(() => {\n\t\tif (!localStorage.country && countries.length) {\n\t\t\tlocalStorage.country = countries[0].name;\n\t\t}\n\n\t\tif (localStorage.country) {\n\t\t\tdispatch(setSelectedCountry({ selectedCountry: localStorage.country }));\n\t\t}\n\t}, [dispatch, countries]);\n\n\treturn (\n\t\t<div>\n\t\t\t<CountriesSelector countries={countries} />\n\t\t\t{activeStation && <ActiveStation station={activeStation} />}\n\t\t\t<Row xs={1} md={2} className='g-4'>\n\t\t\t\t{stations &&\n\t\t\t\t\tstations.map((station) => (\n\t\t\t\t\t\t<Col key={station.stationuuid}>\n\t\t\t\t\t\t\t<StationCard station={station} />\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t))}\n\t\t\t</Row>\n\t\t</div>\n\t);\n};\n","import { useAppSelector } from '../../../store/hooks';\nimport { StationCard } from '../components/station-card';\nimport { Col, Row } from 'react-bootstrap';\nimport { getFavouriteStations } from '../services/selectors';\n\nexport const FavouriteStations = () => {\n\tconst favouriteStations = useAppSelector(getFavouriteStations);\n\n\treturn (\n\t\t<div>\n\t\t\t{!favouriteStations.length && (\n\t\t\t\t<h2 className='text-center'>Favourite list is empty</h2>\n\t\t\t)}\n\t\t\t<Row xs={1} md={2} className='g-4'>\n\t\t\t\t{favouriteStations.map((station) => (\n\t\t\t\t\t<Col key={station.stationuuid}>\n\t\t\t\t\t\t<StationCard station={station} />\n\t\t\t\t\t</Col>\n\t\t\t\t))}\n\t\t\t</Row>\n\t\t</div>\n\t);\n};\n","import {Tab, Tabs} from 'react-bootstrap';\nimport React from 'react';\nimport {AllStations} from '../all-stations';\nimport {FavouriteStations} from '../favourite-stations';\n\nexport const StationsPage = () => {\n    return (\n        <Tabs defaultActiveKey='all-stations' className='mb-3'>\n            <Tab eventKey='all-stations' title='Stations'>\n                <AllStations/>\n            </Tab>\n            <Tab eventKey='favourites' title='Favourites'>\n                <FavouriteStations/>\n            </Tab>\n        </Tabs>\n    )\n};","import React, { useEffect } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container } from 'react-bootstrap';\nimport { Provider } from 'react-redux';\nimport { store } from './store/store';\nimport { StationsPage } from './modules/stations/stations-page';\n\nfunction App() {\n\tuseEffect(() => {\n\t\tif (!localStorage.favourites) {\n\t\t\tlocalStorage.favourites = JSON.stringify([]);\n\t\t}\n\t}, []);\n\n\treturn (\n\t\t<Provider store={store}>\n\t\t\t<Container className='mt-3'>\n\t\t\t\t<StationsPage />\n\t\t\t</Container>\n\t\t</Provider>\n\t);\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}